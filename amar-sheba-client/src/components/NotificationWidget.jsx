import React, { useState } from 'react';
import apiClient from '../api/axios';
import { Card, ListGroup, Button, Alert, Spinner } from 'react-bootstrap';

// üî∏ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ü‡¶æ‡¶á‡¶™ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶∞‡¶ô ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£
const getVariant = (type) => {
  switch (type) {
    case 'error':
      return 'danger';
    case 'warning':
      return 'warning';
    case 'success':
      return 'success';
    default:
      return 'info';
  }
};

const NotificationWidget = ({ notifications, onActionComplete }) => {
  const [loadingStates, setLoadingStates] = useState({});
  const [message, setMessage] = useState('');

  // üîÅ ‡¶®‡¶¨‡¶æ‡ßü‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
  const handleRenew = async (notification) => {
    if (!notification.id || !notification.id.startsWith('dl_')) {
      setMessage('‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: ‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§');
      return;
    }

    const licenseId = notification.id.split('_')[1];
    setLoadingStates((prev) => ({ ...prev, [notification.id]: true }));
    setMessage('');

    try {
      const response = await apiClient.post(`/driving-licenses/${licenseId}/renew`);
      setMessage(response.data.message || '‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶¨‡¶æ‡ßü‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§');
      if (onActionComplete) onActionComplete();
    } catch (error) {
      console.error('‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡¶¨‡¶æ‡ßü‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá:', error);
      setMessage(error.response?.data?.error || '‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡¶¨‡¶æ‡ßü‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§');
    } finally {
      setLoadingStates((prev) => ({ ...prev, [notification.id]: false }));
    }
  };

  if (!notifications || notifications.length === 0) return null;

  return (
    <Card className="shadow-sm">
      <Card.Body>
        <Card.Title className="mb-3">üîî ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶ì ‡¶ï‡¶∞‡¶£‡ßÄ‡ßü</Card.Title>
        {message && (
          <Alert variant="info" className="py-2 text-center">
            {message}
          </Alert>
        )}

        <ListGroup variant="flush">
          {notifications.map((notif) => (
            <ListGroup.Item
              key={notif.id}
              variant={getVariant(notif.type)}
              className="d-flex justify-content-between align-items-center"
            >
              <span>{notif.message}</span>
              {notif.id.startsWith('dl_') && (
                <Button
                  variant="outline-primary"
                  size="sm"
                  onClick={() => handleRenew(notif)}
                  disabled={loadingStates[notif.id]}
                >
                  {loadingStates[notif.id] ? (
                    <>
                      <Spinner animation="border" size="sm" /> ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç...
                    </>
                  ) : (
                    '‡¶®‡¶¨‡¶æ‡ßü‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®'
                  )}
                </Button>
              )}
            </ListGroup.Item>
          ))}
        </ListGroup>
      </Card.Body>
    </Card>
  );
};

export default NotificationWidget;
